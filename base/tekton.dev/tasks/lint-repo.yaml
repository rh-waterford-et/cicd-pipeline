apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: lint-repo
spec:
  params:
    - name: repo
      default: ""
      type: string
    - name: branch
      default: "main"
      type: string
    - name: clean
      default: "true"
      type: string

  steps:
    - image: 'quay.io/luzuccar/rh-waterford-golang:v1.24.5'
      name: lint-codebase
      resources:
        limits:
          cpu: 8000m
          memory: 8Gi
        requests:
          cpu: 8000m
          memory: 8Gi
      script: |
        #!/usr/bin/env bash
        set -euxo pipefail

        cd /home/1001/src

        repo_name=$(echo -e "$(params.repo)" | rev | cut -d/ -f1 | rev | cut -d. -f1)
        echo -e "${repo_name}"

        cd ${repo_name}

        cat << EOF > .golangci.yaml

        # This file contains all available configuration options
        # with their default values.

        # options for analysis running
        run:
          # default concurrency is a available CPU number
          concurrency: 4

          # timeout for analysis, e.g. 30s, 5m, default is 1m
          timeout: 5m

          # exit code when at least one issue was found, default is 1
          issues-exit-code: 1

          # include test files or not, default is true
          tests: true

          # list of build tags, all linters use it. Default is empty list.
          build-tags:
            - json1
            - libdm_no_deferred_remove
            - exclude_graphdriver_devicemapper
            - exclude_graphdriver_btrfs
            - containers_image_openpgp

          # by default isn't set. If set we pass it to "go list -mod={option}". From "go help modules":
          # If invoked with -mod=readonly, the go command is disallowed from the implicit
          # automatic updating of go.mod described above. Instead, it fails when any changes
          # to go.mod are needed. This setting is most useful to check that go.mod does
          # not need updates, such as in a continuous integration and testing system.
          # If invoked with -mod=vendor, the go command assumes that the vendor
          # directory holds the correct copies of dependencies and ignores
          # the dependency descriptions in go.mod.
          modules-download-mode: readonly

          # Allow multiple parallel golangci-lint instances running.
          # If false (default) - golangci-lint acquires file lock on start.
          allow-parallel-runners: false

        issues:
          # Enables exclude of directories:
          # - vendor$, third_party$, testdata$, examples$, Godeps$, builtin$
          exclude-dirs-use-default: true

          # make issues output unique by line, default is true
          uniq-by-line: true

        # output configuration options
        output:
          formats:
            # colored-line-number|line-number|json|tab|checkstyle|code-climate|junit-xml|github-actions
            # default is "colored-line-number"
            format: colored-line-number

          # print lines of code with issue, default is true
          print-issued-lines: true

          # print linter name in the end of issue text, default is true
          print-linter-name: true

          # add a prefix to the output file references; default is no prefix
          path-prefix: ""

          # sorts results by: filepath, line and column
          sort-results: false

        linters:
          disable-all: true
          enable:
            - errcheck
            - gofmt
            - goimports
            - gosimple
            - ineffassign
            - misspell
            - staticcheck
            - typecheck
            - unused
            - bodyclose # check http response body is closed
            - bidichk # check dangerous unicode char sequences
            - containedctx # detects structs with context
            - contextcheck # check non-inherited context usage
            - copyloopvar # check loop vars are copied
            - cyclop # cyclomatic complexity
            - depguard # checks for disallowed deps
            - durationcheck # checks for durations multiplied together
            - errchkjson # checks types passed to json encoding functions
            - errname # error naming convention
            - errorlint # check for error wrapping problems
            - exhaustive # check switch-case exhaustiveness
            - exptostd # check /x/lib can be replaced by std
            - fatcontext # nested contexts
            - goconst # check for repeated strings
            - gocritic # bugs, performance, and style metalinter
            - gosec # inspect security problems
            - iface # interface pollution
            - intrange # checks for loops could use int range
            - ireturn # accept interface, return concrete type
            - makezero # slices are not init non-zero length
            - mirror # wrong bytes/string usage
            - nestif # reports deeply nested ifs
            - nilerr # checks return nil when error
            - noctx # http requests without context
            - nosprintfhostport # check misused of sprintf for host:port
            - prealloc # preallocate slices
            - recvcheck # check for receiver type consistency
            - wrapcheck # wrap errors from external libs
          fast: false

        linters-settings:
          cyclop:
            # The maximal code complexity to report.
            # Default: 10 (for openshift.org)
            max-complexity: 25
            # The maximal average package complexity.
            # If it's higher than 0.0 (float) the check is enabled
            # Default: 0.0
            package-average: 15.0
            # Should ignore tests.
            # Default: false
            skip-tests: true

          nestif:
            # Minimal complexity of if statements to report.
            # Default: 5 (for openshift.org)
            min-complexity: 25

          goimports:
            # put imports beginning with prefix after 3rd-party packages;
            # it's a comma-separated list of prefixes
            local-prefixes:  $(params.repo)

          depguard:
            rules:
              main:
                deny:
                  - pkg: "github.com/pkg/errors"
                    desc: Should be replaced by stdlib errors package

          goconst:
            ignore-tests: true

          wrapcheck:
            ignorePackageGlobs:
              -  $(params.repo)
        EOF
        
        golangci-lint -c .golangci.yaml run -v
  
      volumeMounts:
        - name: $(workspaces.cache.volume)
          mountPath: /.cache
        - name: $(workspaces.cache.volume)
          mountPath: /root/.cache
        - name: $(workspaces.ws.volume)
          mountPath: /home/1001/src

        
  workspaces:
    - mountPath: /src
      name: ws
    - mountPath: /cache
      name: cache

